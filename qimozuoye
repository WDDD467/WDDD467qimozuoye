import streamlit as st
import requests
from bs4 import BeautifulSoup
import time
import json
import jieba
from collections import defaultdict
import random
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from io import BytesIO

# 字体路径，改成你电脑里的
FONT_PATH = "C:/Windows/Fonts/simfang.ttf"

headers = {'User-Agent': 'Mozilla/5.0'}
base_url = "https://so.gushiwen.cn/gushi/songci"
detail_base = "https://so.gushiwen.cn"

@st.cache_data(show_spinner=False)
def get_links_from_page(page_num):
    if page_num == 1:
        url = f"{base_url}.aspx"
    else:
        url = f"{base_url}_{page_num}.aspx"
    resp = requests.get(url, headers=headers)
    if resp.status_code != 200 or "没有找到" in resp.text:
        return []
    soup = BeautifulSoup(resp.text, 'html.parser')
    links = []
    for div in soup.find_all("div", class_="typecont"):
        for a in div.find_all("a"):
            href = a.get('href')
            if href and href.startswith("/shiwenv_"):
                links.append(detail_base + href)
    return links

@st.cache_data(show_spinner=False)
def parse_poem_detail(url):
    resp = requests.get(url, headers=headers)
    if resp.status_code != 200:
        return None, None, None
    soup = BeautifulSoup(resp.text, 'html.parser')
    title_tag = soup.find("h1")
    title = title_tag.text.strip() if title_tag else "未知标题"
    author_tag = soup.find("p", class_="source")
    author = author_tag.find_all("a")[0].text.strip() if author_tag else "未知作者"
    content_tag = soup.find("div", class_="contson")
    content = content_tag.get_text(separator="", strip=True) if content_tag else ""
    return title, author, content

@st.cache_data(show_spinner=True)
def crawl_all(max_page=10, sleep_sec=0.2):
    all_poems = []
    for page in range(1, max_page + 1):
        links = get_links_from_page(page)
        if not links:
            break
        for link in links:
            title, author, content = parse_poem_detail(link)
            if content:
                all_poems.append({"title": title, "author": author, "content": content})
            time.sleep(sleep_sec)
    return all_poems

@st.cache_data
def word_frequency(poems, min_len=2):
    freq = defaultdict(int)
    for poem in poems:
        words = jieba.lcut(poem["content"])
        for w in words:
            if len(w.strip()) >= min_len:
                freq[w] += 1
    return dict(sorted(freq.items(), key=lambda x: x[1], reverse=True))

def generate_wordcloud(freq_dict):
    wc = WordCloud(font_path=FONT_PATH, background_color="white", width=800, height=600)
    wc.generate_from_frequencies(freq_dict)
    img_buf = BytesIO()
    wc.to_image().save(img_buf, format='PNG')
    img_buf.seek(0)
    return img_buf

def random_sentence_with_word(word, poems):
    candidates = [p["content"] for p in poems if word in p["content"]]
    if candidates:
        return random.choice(candidates)
    return "抱歉，没找到包含该意象的句子"

def main():
    st.title("宋词意象统计与互动抽取")
    st.write("从古诗文网爬取宋代词，统计常见意象，词云展示，并支持根据颜色抽取含意象的宋词句子。")

    # 爬取或载入数据
    if st.button("开始爬取宋词（约需几分钟）"):
        poems = crawl_all(max_page=10)
        st.session_state["poems"] = poems
        st.success(f"爬取完成，获取到 {len(poems)} 首宋词")
    else:
        poems = st.session_state.get("poems", None)
        if poems is None:
            st.info("请先点击上方按钮爬取数据")
            return

    # 词频统计与显示
    freq = word_frequency(poems)
    top_words = dict(list(freq.items())[:20])
    st.subheader("常见意象词频 Top 20")
    for w, c in top_words.items():
        st.write(f"{w}: {c} 次")

    # 生成词云
    st.subheader("词云图")
    img_buf = generate_wordcloud(dict(list(freq.items())[:100]))
    st.image(img_buf)

    # 颜色-意象映射（这里给几组常见颜色-意象，按你需求可以扩充）
    color_word_map = {
        "红色": ["花", "火", "霞", "血"],
        "绿色": ["柳", "草", "竹", "苹"],
        "蓝色": ["海", "云", "天", "波"],
        "黄色": ["秋", "叶", "金", "菊"],
        "白色": ["雪", "霜", "玉", "月"],
        "黑色": ["夜", "墨", "雾", "烟"],
    }

    st.subheader("选择颜色随机抽取含对应意象的宋词句子")

    color_choice = st.selectbox("选择颜色", list(color_word_map.keys()))
    if st.button("抽取句子"):
        words = color_word_map[color_choice]
        chosen_word = random.choice(words)
        sentence = random_sentence_with_word(chosen_word, poems)
        st.markdown(f"### 颜色：{color_choice}，意象词：**{chosen_word}**")
        st.write(sentence)

if __name__ == "__main__":
    main()
